#include <iostream> 
#include <fstream>
#include <TFile.h>
#include <TH1F.h>
#include <string>
#include <TGraphErrors.h>
#include <TF1.h>
#include <TRandom.h>
#include <TCanvas.h>
#include <TString.h>
#include <vector>
#include <string>
#include <TLegend.h>
#include <cmath>
#include <TMath.h>
#include <TLatex.h>
using namespace std; 



void efficiency_calculation(TCanvas *Eff) {

    Eff->cd();
    Eff->SetGrid();

    // Number of peaks outside the reference
    const int nPeaks = 8;
    double N_ref = 19458.1; 
    double I_ref = 28.37; 
    double N_i[nPeaks] = {2877.63, 6819.08, 468.167, 839.713, 912.13, 518.82, 656.77, 1004.96};  
    double I_i[nPeaks] = {7.53, 26.57, 3.125, 12.97, 14.63, 10.13,  13.54, 20.85};  // intensities of other peaks
    double sigma_N_i[nPeaks] = {63.86, 86.83, 34.87, 42.52, 38.54, 32.74, 35.63, 32.73};  // uncertainties in N_i
    double sigma_I_i[nPeaks] = {4.0, 11.0, 14.0, 6.0, 6.0, 5.0, 6.0, 9.0};  // uncertainties in I_i
    double sigma_N_ref = 148.52 ;  // uncertainty in N_ref
    double sigma_I_ref = 13.0;  // uncertainty in I_ref

    // Arrays to store calculated efficiencies and errors
    double efficiency[nPeaks];
    double sigma_efficiency[nPeaks];
    double energy[nPeaks] = {244.697, 344.279, 443.965, 778.821, 964.079, 1085.869, 1112.069, 1408.006};  // energies
    double energy_err[nPeaks] = {0.001, 0.001, 0.003, 0.002, 0.018, 0.024, 0.003, 0.003};  // uncertainty in energies

    // Calculate relative efficiencies and their uncertainties
    for (int i = 0; i < nPeaks; ++i) {
        double expected_i = (N_ref / I_ref) * I_i[i];
        efficiency[i] = (N_i[i] * I_ref) / (N_ref * I_i[i]);

        // Error propagation
        double fractional_uncertainty = pow(sigma_N_i[i] / N_i[i], 2)
                                      + pow(sigma_I_ref / I_ref, 2)
                                      + pow(sigma_N_ref / N_ref, 2)
                                      + pow(sigma_I_i[i] / I_i[i], 2);
        sigma_efficiency[i] = efficiency[i] * sqrt(fractional_uncertainty);

        std::cout << "Efficiency for peak " << i+2 << " (Energy = " << energy[i] << " keV): "
                  << efficiency[i] << " ± " << sigma_efficiency[i] << std::endl;
    }

    // Create a graph of efficiency vs energy with error bars
    TGraphErrors *graph = new TGraphErrors(nPeaks, energy, efficiency, energy_err, sigma_efficiency);
    graph->SetTitle("Relative Efficiency vs Energy;Energy (keV);Relative Efficiency");
    graph->SetMarkerStyle(21);
    graph->SetMarkerColor(kBlue);
    graph->Draw("AP");
    


    // Fit the graph with a quadratic function for low energies
    TF1 *fitFunc1 = new TF1("fitFunc1", " [0]*x^2  + [1]*x + [2]", 0, 500);  
    fitFunc1->SetLineColor(kRed);
    graph->Fit(fitFunc1, "R");

    // Fit the graph with a linear function for higher energies
    TF1 *fitFunc2 = new TF1("fitFunc2", "[0]*x + [1]", 750, 1500);  
    fitFunc2->SetLineColor(kGreen);
    graph->Fit(fitFunc2, "R+");

    // Add a legend to the canvas
    TLegend *legend = new TLegend(0.6, 0.7, 0.9, 0.9);
    legend->AddEntry(graph, "Data points", "p");
    legend->AddEntry(fitFunc1, "Pol2 Fit (0-500 keV)", "l");
    legend->AddEntry(fitFunc2, "Pol3 Fit (750-1500 keV)", "l");
    legend->Draw();
}




void Run1() { 



TCanvas *c1 = new TCanvas("c1", "Efficiency vs Energy", 800, 600);
efficiency_calculation(c1); 
TFile *Eff1 = new TFile("Efficiencies_first_run.root", "RECREATE"); 
c1->Write();
Eff1->Close(); 


}  



-----------------------------------------------------------------------------------------------------
Results: 

Efficiency for peak 2 (Energy = 244.697 keV): 0.557184 ± 0.391105
Efficiency for peak 3 (Energy = 344.279 keV): 0.374191 ± 0.231149
Efficiency for peak 4 (Energy = 443.965 keV): 0.218429 ± 0.983802
Efficiency for peak 5 (Energy = 778.821 keV): 0.0943952 ± 0.061654
Efficiency for peak 6 (Energy = 964.079 keV): 0.0909016 ± 0.0560365
Efficiency for peak 7 (Energy = 1085.87 keV): 0.0746734 ± 0.0505159
Efficiency for peak 8 (Energy = 1112.07 keV): 0.0707218 ± 0.0452477
Efficiency for peak 9 (Energy = 1408.01 keV): 0.0702751 ± 0.0443023
****************************************
Minimizer is Minuit2 / Migrad
Chi2                      =  5.18402e-19
NDf                       =            0
Edm                       =  5.18421e-19
NCalls                    =           60
p0                        =  1.38049e-06   +/-   5.8168e-05
p1                        =  -0.00265069   +/-   0.0367339
p2                        =      1.12314   +/-   5.73433
****************************************
Minimizer is Minuit2 / Migrad
Chi2                      =    0.0599189
NDf                       =            3
Edm                       =  1.42184e-15
NCalls                    =           40
p0                        = -3.91655e-05   +/-   0.000111067
p1                        =     0.121479   +/-   0.125868
-------------------------------------------------------------------------------
(Fixed Results): 


#include <iostream> 
#include <fstream>
#include <TFile.h>
#include <TH1F.h>
#include <string>
#include <TGraphErrors.h>
#include <TF1.h>
#include <TRandom.h>
#include <TCanvas.h>
#include <TString.h>
#include <vector>
#include <string>
#include <TLegend.h>
#include <cmath>
#include <TMath.h>
#include <TLatex.h>
using namespace std; 



void efficiency_calculation(TCanvas *Eff) {

    Eff->cd();
    Eff->SetGrid();

    // Number of peaks outside the reference
    const int nPeaks = 8;
    double N_ref = 33304.5; 
    double I_ref = 28.37; 
    double I_i[nPeaks] = {7.53, 26.57, 3.125, 12.97, 14.63, 10.13,  13.54, 20.85};  // intensities of other peaks
    double N_i[nPeaks] = {4754.74, 11587.8, 421.276, 910.91, 1669.06, 887.99, 1283.13, 1738.67};  
    double sigma_N_i[nPeaks] = {84.59, 115.705, 51.06, 63.36, 52.068, 45.25, 47.27, 43.16};  // uncertainties in N_i
    double sigma_N_ref = 148.52 ;  // uncertainty in N_ref
    double sigma_I_i[nPeaks] = {0.04, 0.11, 0.014, 0.06, 0.06, 0.05, 0.06, 0.09};  // uncertainties in I_i
   double sigma_I_ref = 0.13;  // uncertainty in I_ref

    // Arrays to store calculated efficiencies and errors
    double efficiency[nPeaks];
    double sigma_efficiency[nPeaks];
    double energy[nPeaks] = {244.697, 344.279, 443.965, 778.821, 964.079, 1085.869, 1112.069, 1408.006};  // energies
    double energy_err[nPeaks] = {0.001, 0.001, 0.003, 0.002, 0.018, 0.024, 0.003, 0.003};  // uncertainty in energies

    // Calculate relative efficiencies and their uncertainties
    for (int i = 0; i < nPeaks; ++i) {
        double expected_i = (N_ref / I_ref) * I_i[i];
        efficiency[i] = (N_i[i] * I_ref) / (N_ref * I_i[i]);

        // Error propagation
        double fractional_uncertainty = pow(sigma_N_i[i] / N_i[i], 2)
                                      + pow(sigma_I_ref / I_ref, 2)
                                      + pow(sigma_N_ref / N_ref, 2)
                                      + pow(sigma_I_i[i] / I_i[i], 2);
        sigma_efficiency[i] = efficiency[i] * sqrt(fractional_uncertainty);

        std::cout << "Efficiency for peak " << i+2 << " (Energy = " << energy[i] << " keV): "
                  << efficiency[i] << " ± " << sigma_efficiency[i] << std::endl;
    }

    // Create a graph of efficiency vs energy with error bars
    TGraphErrors *graph = new TGraphErrors(nPeaks, energy, efficiency, energy_err, sigma_efficiency);
    graph->SetTitle("Run2: Relative Efficiency vs Energy;Energy (keV);Relative Efficiency");
    graph->SetMarkerStyle(21);
    graph->SetMarkerColor(kBlue);
    graph->Draw("AP");

    // Fit the graph with a quadratic function for low energies
    TF1 *fitFunc1 = new TF1("fitFunc1", " [0]*x^2  + [1]*x + [2]", 0, 500);  
    fitFunc1->SetLineColor(kRed);
    graph->Fit(fitFunc1, "R");

    // Fit the graph with a linear function for higher energies
    TF1 *fitFunc2 = new TF1("fitFunc2", " [0]*x + [1]", 750, 1500);  
    fitFunc2->SetLineColor(kGreen);
    graph->Fit(fitFunc2, "R+");

    // Add a legend to the canvas
    TLegend *legend = new TLegend(0.6, 0.7, 0.9, 0.9);
    legend->AddEntry(graph, "Data points", "p");
    legend->AddEntry(fitFunc1, "Pol2 Fit (0-500 keV)", "l");
    legend->AddEntry(fitFunc2, "Linear Fit (750-1500 keV)", "l");
    legend->Draw();
}




void Run1() { 



TCanvas *c1 = new TCanvas("c1", "Efficiency vs Energy", 800, 600);
efficiency_calculation(c1); 
TFile *Eff1 = new TFile("Efficiencies_2nd_run.root", "RECREATE"); 
c1->Write();
Eff1->Close(); 


}  



-------------------------------------------------------------------------------
Efficiency for peak 2 (Energy = 244.697 keV): 0.557184 ± 0.0136477
Efficiency for peak 3 (Energy = 344.279 keV): 0.374191 ± 0.00601664
Efficiency for peak 4 (Energy = 443.965 keV): 0.218429 ± 0.016414
Efficiency for peak 5 (Energy = 778.821 keV): 0.0943952 ± 0.00487275
Efficiency for peak 6 (Energy = 964.079 keV): 0.0909016 ± 0.00394284
Efficiency for peak 7 (Energy = 1085.87 keV): 0.0746734 ± 0.00477316
Efficiency for peak 8 (Energy = 1112.07 keV): 0.0707218 ± 0.00390061
Efficiency for peak 9 (Energy = 1408.01 keV): 0.0702751 ± 0.00239203
****************************************
Minimizer is Minuit2 / Migrad
Chi2                      =  2.39636e-14
NDf                       =            0
Edm                       =  2.39636e-14
NCalls                    =           90
p0                        =  1.38049e-06   +/-   1.23416e-06
p1                        =  -0.00265069   +/-   0.000839626
p2                        =      1.12314   +/-   0.14224
****************************************
Minimizer is Minuit2 / Migrad
Chi2                      =       9.5887
NDf                       =            3
Edm                       =  5.08215e-08
NCalls                    =           40
p0                        = -3.66794e-05   +/-   7.15112e-06
p1                        =     0.120163   +/-   0.00859698
root [2]





















